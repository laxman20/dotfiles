default_team := 'wethenorth-sl-r9int'
default_namespace := 'laxman-sooriyathas'

default:
	@just --list

update:
	./.local-wfm.venv/bin/python local-wfm/kds.py update
	./.local-wfm.venv/bin/python local-wfm/kds.py wait-ready

build:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	./gradlew build -Dorg.gradle.jvmargs="-Xms1024m -Xmx4096m" -Pteam={{default_team}}

test:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	./gradlew test -Dorg.gradle.jvmargs="-Xms1024m -Xmx4096m"

build-no-team:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	./gradlew build -Dorg.gradle.jvmargs="-Xms1024m -Xmx4096m" -x test

build-with-team team:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	./gradlew build -Dorg.gradle.jvmargs="-Xms1024m -Xmx4096m" -Pteam={{team}} -x test

build-no-test:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	./gradlew build -Dorg.gradle.jvmargs="-Xms1024m -Xmx4096m" -Pteam={{default_team}} -x test

clean:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	./gradlew clean -Dorg.gradle.jvmargs="-Xms1024m -Xmx4096m" -Pteam={{default_team}} -x test

sh-bff:
	docker exec -it frontend-nodejs sh
		
build-node:
	#!/usr/bin/env bash
	cd ~/dev/dimensions/frontend/packages/pres/base
	grunt watchApps

build-web:	
	#!/usr/bin/env bash
	cd ~/dev/dimensions/frontend/packages/web/base
	npm run webpack

kube-sh namespace=default_namespace:
	kubectl -n {{namespace}} exec -it backend-0 -c tomcat sh

kube-sh-node:
	kubectl -n laxman-sooriyathas exec -it frontend-0 -c nodejs -- sh

kube-sh-web:
	kubectl -n laxman-sooriyathas exec -it frontend-0 -c nginx -- sh

kube-bundles:
	kubectl -n laxman-sooriyathas exec -it frontend-0 -c nginx -- rm -rf /var/www/bundles
	kubectl cp ~/dev/dimensions/frontend/packages/web/base/bundles frontend-0:/var/www -c nginx -n laxman-sooriyathas

kube-restart-web:
	kubectl -n laxman-sooriyathas exec -it frontend-0 bash -c nginx -- kill -9 -1
	kubectl -n laxman-sooriyathas exec -it frontend-0 bash -c nodejs -- kill -9 -1

kube-copy-jars:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	find ./components -name '*.jar' -exec kubectl -n laxman-sooriyathas cp {} -c tomcat backend-0:/tmp/ \;

ssh-copy-jars server:
	#!/usr/bin/env bash
	cd {{invocation_directory()}}
	fd -I --glob '*.jar' ./components -X sshpass -p "$(pass kronos)" scp -o StrictHostKeychecking=no {} LS80715@{{server}}-1.int.dev.mykronos.com:/tmp/ \;

get-pods:
	kubectl -n laxman-sooriyathas get pods

valid-tenant tenant:
	curl --location --request POST 'http://keng03-dev01-ath40-oam.int.dev.mykronos.com:80/authn/json/{{tenant}}/authenticate' \
		     --header 'X-OpenAM-Username: CharlesPrinceton' \
		     --header 'X-OpenAM-Password: Pr0mensi0ns@UKG' \
		     --header 'Content-Type: application/json' \
		     --data-raw '{}'

ssh-ha server instance="1":
	sshpass -p "$(pass kronos)" ssh -o StrictHostKeychecking=no LS80715@{{server}}-{{instance}}.int.dev.mykronos.com

eng-ssh server instance="1":
	sshpass -p "$(pass enguser)" ssh -o StrictHostKeychecking=no enguser@{{server}}-{{instance}}.int.dev.mykronos.com

dump-logs server instance="1":
	sshpass -p "$(pass kronos)" scp -r LS80715@{{server}}-{{instance}}.int.dev.mykronos.com:/data/logs/wfc ~/Downloads/{{server}}-$(uuidgen)

gcloud-wfmaas:
	gcloud container clusters get-credentials --zone us-east1 wfmaas

gcloud-scheduling:
	gcloud container clusters get-credentials --zone us-east1 scheduling

vanity-url wfm:
	PGPASSWORD=tkcsowner psql -h keng03-dev01-tms25-dbs-mas.int.dev.mykronos.com -U tkcsowner -p5444 -d ppas_tms41_r9 -c "select w.wfm_cluster_name, v.vanity_url \
	from tmsservice.vanity_url_details v \
	join tmsservice.tenant t on v.tenant_id = t.id \
	join tmsservice.wfm_cluster w on t.wfm_cluster_id = w.id \
	where w.wfm_cluster_name like '%{{wfm}}%';"
